@using SmartHomeWWW.Core.Domain.Relays;
@using SmartHomeWWW.Core.ViewModel
@inject RelaysHttpClient RelayClient

<h3>Relay <i>@Name</i></h3>
<p>@Type</p>
<div class="btn @StateClass">
    <span class="spinner-border @(StateClass)" hidden="@(State != RelayViewState.Fetching)" role="status"></span>
    @StateText
</div>

<button type="button" class="btn btn-primary" @onclick="(async () => await Toggle())">Toggle</button>

@code {
    [Parameter]
    public RelayEntryViewModel Entry { get; init; } = new RelayEntryViewModel();

    public string Name => Entry.Name;
    public string Type => Entry.Type;

    private RelayViewState State { get; set; } = RelayViewState.Unknown;

    private static TimeSpan RelayClientTimeout = TimeSpan.FromSeconds(5);

    private string StateClass =>
        State switch
        {
            RelayViewState.Fetching => "btn-secondary",
            RelayViewState.On => "btn-success",
            RelayViewState.Off => "btn-danger",
            RelayViewState.Error => "btn-warning",
            _ => "btn-secondary",
        };

    private string StateText =>
        State switch
        {
            RelayViewState.Fetching => string.Empty,
            RelayViewState.On => "On",
            RelayViewState.Off => "Off",
            RelayViewState.Error => "Error",
            _ => string.Empty,
        };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await FetchState();
    }

    private async ValueTask Toggle()
    {
        State = RelayViewState.Fetching;
        using var cts = new CancellationTokenSource(RelayClientTimeout);
        var state = await RelayClient.ToggleRelay(Entry.Id);
        State = ToViewState(state);
    }

    private async ValueTask FetchState()
    {
        State = RelayViewState.Fetching;
        using var cts = new CancellationTokenSource(RelayClientTimeout);
        var state = await RelayClient.GetState(Entry.Id, cts.Token);
        State = ToViewState(state);
    }

    private RelayViewState ToViewState(RelayState state) =>
        state switch
        {
            RelayState.Unknown => RelayViewState.Fetching,
            RelayState.On => RelayViewState.On,
            RelayState.Off => RelayViewState.Off,
            RelayState.Error => RelayViewState.Error,
            _ => RelayViewState.Unknown,
        };

    private enum RelayViewState
    {
        Unknown,
        Fetching,
        On,
        Off,
        Error,
    }
}
