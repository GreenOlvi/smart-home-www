@using SmartHomeWWW.Client.Models;
@using SmartHomeWWW.Core.Domain.Relays;
@using SmartHomeWWW.Core.ViewModel
@using static SmartHomeWWW.Client.Models.RelayProxy;

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h5">@Entry.Name</MudText>
            <MudText Typo="Typo.body2">@Entry.Type @Entry.Kind</MudText>
        </CardHeaderContent>
    </MudCardHeader>

    <MudCardContent>
        <MudButton Variant="Variant.Filled" Color="StateColor" OnClick="Refresh">
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" hidden="@(!IsFetching)" Size="Size.Small"/>
            @StateText
        </MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Toggle">Toggle</MudButton>
    </MudCardContent>

</MudCard>

@code {
    [Parameter]
    public RelayProxy Entry { get; init; } = default!;

    private RelayViewState State => Entry.State;
    private bool IsFetching => State == RelayViewState.Fetching;

    private Color StateColor =>
        State switch
        {
            RelayViewState.Fetching => Color.Default,
            RelayViewState.On => Color.Success,
            RelayViewState.Off => Color.Error,
            RelayViewState.Error => Color.Warning,
            _ => Color.Secondary,
        };

    private string StateText =>
        State switch
        {
            RelayViewState.Fetching => string.Empty,
            RelayViewState.On => "On",
            RelayViewState.Off => "Off",
            RelayViewState.Error => "Error",
            _ => string.Empty,
        };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Task.Delay(300);
        await Entry.FetchState();
    }

    private Task Toggle(MouseEventArgs e) => Entry.Toggle().AsTask();
    private Task Refresh(MouseEventArgs e) => Entry.FetchState().AsTask();
    private Task SetState(bool on) => Entry.SetState(on).AsTask();
}
