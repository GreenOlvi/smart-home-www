@using System.Threading
@using Humanizer
@using Humanizer.Localisation
@using Utils 

@implements IAsyncDisposable

<em style="color: @CurrentColour.ToCss()">@TimeSince.Humanize(precision:3, minUnit: TimeUnit.Second)</em>

@code {
    private const int HighSeconds = 70;

    [Parameter]
    public DateTime StartTime { get; init; }

    private TimeSpan TimeSince => DateTime.UtcNow - StartTime;
    private double l => Math.Min(1.0, TimeSince.TotalSeconds / (double)HighSeconds);

    private readonly ColourGradient _gradient = new(
        new Colour { R = 0, G = 128, B = 0 },
        new Colour { R = 255, G = 0, B = 0 });

    private Colour CurrentColour => _gradient.GetIntermediate(l);

    private Timer? _timer = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _timer = new(async (object? stateInfo) => await InvokeAsync(StateHasChanged),
            new AutoResetEvent(false), 1000 - TimeSince.Milliseconds, 1000);
    }

    public async ValueTask DisposeAsync()
    {
        if (_timer is not null)
        {
            await _timer.DisposeAsync();
        }
    }
}
