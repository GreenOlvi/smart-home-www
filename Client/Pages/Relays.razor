@page "/relays"
@using SmartHomeWWW.Client.Models;
@using SmartHomeWWW.Core.Domain.Relays;

@inject ILogger<Relays> Logger
@inject RelaysHttpClient RelaysClient
@inject ISensorsHub HubConnection

<main>
    <MudText Typo="Typo.h2">Relays</MudText>

    <MudGrid Justify="Justify.FlexStart">

    @if (RelayList != null && RelayList.Any())
    {
        @foreach (var relay in RelayList)
        {
            <MudItem xs="3">
                <RelayBox Entry="relay" />
            </MudItem>
        }
    }
    else
    {
        <MudItem xs="12">
        @if (_isLoading)
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        }
        else
        {
            <MudAlert Severity="Severity.Warning">No relays found</MudAlert>
        }
        </MudItem>
    }

    </MudGrid>
</main>

@code {
    private IReadOnlyList<RelayProxy> RelayList = Array.Empty<RelayProxy>();
    private bool _isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadRelays();

        HubConnection.OnRelayStateUpdated((id, state) =>
        {
            Logger.LogInformation("Received RelayStateUpdated for {Id} to '{State}'", id, state);
            foreach (var relay in RelayList.Where(r => r.Id == id))
            {
                relay.UpdateState(state);
            }
            StateHasChanged();
        });

        await HubConnection.StartIfNotConnectedAsync();
    }

    private async Task LoadRelays()
    {
        _isLoading = true;
        RelayList = (await RelaysClient.GetRelays()).Select(r => new RelayProxy(r, RelaysClient)).ToList();
        _isLoading = false;
    }

    public ValueTask DisposeAsync()
    {
        HubConnection.RemoveOnRelayStateUpdated();
        return ValueTask.CompletedTask;
    }
}
