@page "/relays"
@using SmartHomeWWW.Client.Models;
@using SmartHomeWWW.Core.Domain.Relays;
@using SmartHomeWWW.Core.Infrastructure.Tasmota;

@inject ILogger<Relays> Logger
@inject RelaysHttpClient RelaysClient
@inject ISensorsHub HubConnection

<main>
    <MudText Typo="Typo.h2">Relays</MudText>

    <MudGrid Justify="Justify.FlexStart">
        <MudItem xs="12">
            <MudChipSet MultiSelection="false" SelectedChipChanged="FilterByKind" Mandatory="true" Filter="true">
                <MudChip Color="Color.Primary" Text="All" Default="_tasmotaKindFilter is null" />
                @foreach (var kind in Enum.GetNames<TasmotaClientKind>())
                {
                <MudChip Color="Color.Primary" Text="@kind" Default="_tasmotaKindFilter.HasValue && _tasmotaKindFilter.Value.ToString() == kind" />
                }
            </MudChipSet>
        </MudItem>

    @if (RelayList != null && RelayList.Any())
    {
        @foreach (var relay in RelayList)
        {
            <MudItem hidden="@(!IsVisible(relay))">
                <RelayBox Entry="relay" />
            </MudItem>
        }
    }
    else
    {
        <MudItem xs="12">
        @if (_isLoading)
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        }
        else
        {
            <MudAlert Severity="Severity.Warning">No relays found</MudAlert>
        }
        </MudItem>
    }

    </MudGrid>
</main>

@code {
    private readonly List<RelayProxy> RelayList = new();

    private bool _isLoading = false;
    private TasmotaClientKind? _tasmotaKindFilter = TasmotaClientKind.Mqtt;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadRelays();

        HubConnection.OnRelayStateUpdated((id, state) =>
        {
            Logger.LogDebug("Received RelayStateUpdated for {Id} to '{State}'", id, state);
            foreach (var relay in RelayList.Where(r => r.Id == id))
            {
                relay.UpdateState(state);
            }
            StateHasChanged();
        });

        await HubConnection.StartIfNotConnectedAsync();
    }

    private async Task LoadRelays()
    {
        _isLoading = true;
        var relays = await RelaysClient.GetRelays();
        RelayList.Clear();
        RelayList.AddRange(relays.Select(r => new RelayProxy(r, RelaysClient)));
        _isLoading = false;
    }

    public ValueTask DisposeAsync()
    {
        HubConnection.RemoveOnRelayStateUpdated();
        return ValueTask.CompletedTask;
    }

    private bool IsVisible(RelayProxy relay) =>
        !_tasmotaKindFilter.HasValue || _tasmotaKindFilter.Value == relay.Kind;

    private Task FilterByKind(MudChip chip)
    {
        if (Enum.TryParse<TasmotaClientKind>(chip.Text, true, out var kind))
        {
            _tasmotaKindFilter = kind;
        }
        else
        {
            _tasmotaKindFilter = null;
        }

        StateHasChanged();
        return Task.CompletedTask;
    }
}
