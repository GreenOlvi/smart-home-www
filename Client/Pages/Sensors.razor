@page "/sensors"

@using Microsoft.AspNetCore.SignalR.Client

@implements IAsyncDisposable

@inject ILogger<Sensors> Logger
@inject NavigationManager NavigationManager
@inject SensorsHttpClient SensorsClient
@inject HubConnection HubConnection

<div class="text-center">
    <h1 class="display-4">Sensors</h1>
    @if (SensorsList != null && SensorsList.Any())
    {
<table class="table table-borderless">
    <thead>
        <tr>
            <th scope="col">Alias</th>
            <th scope="col">MAC</th>
            <th scope="col">Chip type</th>
            <th scope="col">Last contact</th>
            <th scope="col">Firmware version</th>
            <th scope="col"></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var sensor in SensorsList)
        {
        <tr>
            <td>@sensor.Alias</td>
            <td>@sensor.Mac</td>
            <td>@sensor.ChipType</td>
            <td>
                @sensor.LastContact?.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")<br />
                @if (sensor.LastContact.HasValue)
                {
                    <SensorTimer StartTime="sensor.LastContact.Value" />
                }
            </td>
            <td>@sensor.FirmwareVersion</td>
            <td><button type="button" class="btn btn-danger" @onclick="(() => DeleteSensor(sensor))">Delete</button></td>
        </tr>
        }
    </tbody>
</table>
    }
    else
    {
<div class="alert alert-warning" role="alert">No sensors found</div>
    }
</div>


@code {
    IReadOnlyList<Sensor> SensorsList = Array.Empty<Sensor>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await LoadSensors();

        HubConnection.On<Sensor>("SensorUpdated", async sensor =>
        {
            Logger.LogInformation($"Received SensorUpdated on {sensor.Mac}");
            await LoadSensors();
            StateHasChanged();
        });

        if (HubConnection.State == HubConnectionState.Disconnected)
        {
            await HubConnection.StartAsync();
        }
    }

    private async Task LoadSensors()
    {
        SensorsList = (await SensorsClient.GetSensors()).ToList();
    }

    private async Task DeleteSensor(Sensor sensor)
    {
        await SensorsClient.DeleteSensor(sensor.Id);
        await LoadSensors();
    }

    public ValueTask DisposeAsync()
    {
        HubConnection.Remove("SensorUpdated");
        return ValueTask.CompletedTask;
    }
}
